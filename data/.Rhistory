bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
myCols <- c("lightcoral", "cadetblue", "lightslateblue", "deepskyblue1","aquamarine3", "yellow", "hotpink", "lightgrey", "springgreen", "lightpink", "darkolivegreen1", "azure", "plum")
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
myCols <- c("lightcoral", "cadetblue", "cyan", "deepskyblue1","aquamarine3", "yellow", "hotpink", "lightgrey", "springgreen", "lightpink", "darkolivegreen1", "azure", "plum")
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
myCols <- c("lightcoral", "cadetblue", "steelblue1", "deepskyblue1","aquamarine2", "yellow", "hotpink", "lightgrey", "springgreen", "lightpink", "darkolivegreen1", "azure", "plum")
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
myCols <- c("lightcoral", "cadetblue", "steelblue1", "lavender","aquamarine2", "yellow", "hotpink", "lightgrey", "springgreen", "lightpink", "darkolivegreen1", "azure", "plum")
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
pdf( file="revigo_treemap1.pdf", width=17, height=11 ) # width and height are in inches
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
dev.off()
pdf( file="revigo_treemap1.pdf", width=17, height=11 ) # width and height are in inches
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
#fontsize.labels=c(0,1),
palette = myCols
)
dev.off()
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = F,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
#fontsize.labels=c(0,1),
palette = myCols
)
pdf( file="revigo_treemap1.pdf", width=17, height=11 ) # width and height are in inches
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = F,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
#fontsize.labels=c(0,1),
palette = myCols
)
dev.off()
pdf( file="revigo_treemap1.pdf", width=17, height=11 ) # width and height are in inches
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "right",
fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
dev.off()
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
#	position.legend = "right",
#	fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
pdf( file="revigo_treemap1.pdf", width=17, height=11 ) # width and height are in inches
treemap(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = T,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0.5,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCAA",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
position.legend = "none",
#	fontsize.legend = 15,
fontsize.labels=c(0,1),
palette = myCols
)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
term1 <- 1
term2 <- 2
while(total_var > 4000000){
total_var <- 2
add_var <- term1 + term2
term1 <- term2
term2 <- add_var
if(add_var %% 2 == 0){
total_var = total_var + add_var
} else {
total_var = total_var
}
}
source('~/.active-rstudio-document', echo=TRUE)
total_var
term1+term2
term1 <- 1
term2 <- 2
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
term1 <- term2
term2 <- add_var
if(add_var %% 2 == 0){
total_var = total_var + add_var
} else {
total_var = total_var
}
}
total_var <- 2
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
term1 <- term2
term2 <- add_var
if(add_var %% 2 == 0){
total_var = total_var + add_var
} else {
total_var = total_var
}
}
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
term1 <- term2
term2 <- add_var
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
}
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
total_var <- 2
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
term1 <- 1
term2 <- 2
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
total_var <- 2
while(total_var <= 4000000){
total_var <- 2
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
is.even(term1)
add_var %% 2 == 0
term1 <- 1
term2 <- 2
total_var <- 2
while(total_var <= 10){
total_var <- 2
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
term1 <- 1
term2 <- 2
total_var <- 2
while(total_var <= 10){
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
term1 <- 1
term2 <- 2
total_var <- 2
while(term2 <= 4000000){
add_var <- term1 + term2
if(add_var %% 2 == 0){
total_var = total_var + add_var
}
term1 <- term2
term2 <- add_var
}
total_var
prime <-function(x){
prime_nums=c()
i=2
r=x
while(prod(n)!=x){
if(!r%%i) {n=c(n,i);r=r/i;i=1}
i=i+1
}
n
}
prime(600851475143)
prime <-function(x){
prime_nums=c()
i=2
r=x
while(prod(prime_nums)!=x){
if(!r%%i) {prime_nums=c(prime_nums,i);r=r/i;i=1}
i=i+1
}
prime_nums
}
prime(600851475143)
2%%6
20%%6
40%%8
!40%%7
!30%%7
30%%7
?prod
71*839*1471*6857
prime_nums=c()
i=2
x ,_ 71*839*1471*6857
x <- 71*839*1471*6857
r=x
while(prod(prime_nums)!=x){
if(!r%%i) {prime_nums=c(prime_nums,i);r=r/i;i=1}
i=i+1
}
if(!r%%i) {prime_nums=c(prime_nums,i);r=r/i;i=1}
!r%%i
i=i+1
if(!r%%i)
!r%%i
!r%%71
!x%%71
prime_nums
prime_nums=c(prime_nums, 5)
999*999
while(num = 0){
i = 1
j <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (k in j){
num1 <- 0
if(i%%k==0){
num1 <- num1 + 1
if(num1 == 20){
num = i
}
}
i = i +1
}
}
}
while(num = 0){
i = 1
j <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (k in j){
num1 <- 0
if(i%%k==0){
num1 <- num1 + 1
if(num1 == 20){
num = i
}
}
i = i +1
}
}
i = 1
j <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (k in j){
num1 <- 0
if(i%%k==0){
num1 <- num1 + 1
if(num1 == 20){
num = i
}
}
i = i +1
}
num <- c()
counter <- 1
num <- c()
for(i in 1:20){
if(counter %% i == 0){
num <- c(num,i)
}
counter<- counter + 1
}
small.composite <- function(n) {
composite <- 1
for (i in 1:n) {
remain <- (composite %% i)
if (remain != 0) {
if (i %% remain == 0) {
composite <- composite * i / remain
}
else {
composite <- composite * i
}
}
}
return(composite)
}
cat("The result is:", small.composite(20), "\n")
x <- c(1:100)
a <- apply(x, x^2)
?apply
a <- apply(x, 1, x^2)
x <- data.matrix(1:100)
a <- apply(x, 1, x^2)
x2 <- x^2
sum(x2)
sum(x)
a <- sum(x^2)
b <- sum(x)^2
a <- sum(x^2)
b <- sum(x)^2
a-b
b <- sum(x)
b^2
b-a
a <- sum(x^2)
b <- sum(x)
b <- sum(x)^2
b-a
h <- c(1:100)
h
i <- h+5
mean(h)
mean(i)
median(h)
median(i)
sd(h)
sd(i)
j <- h/2.54
mean(j)
median(j)
sd(j)
library(gtools)
permutations(4, 3, v = 1:4)
permutations(4, 3, v = 1:4, repeats.allowed = T)
permutations
?prop.test
prop.test(x = c(32, 30), n = c(595, 599), p = 0.05, alternative = "less", correct = F)
prop.test(x = c(32, 30), n = c(595, 599), alternative = "less", correct = F)
prop.test(30, 599, 0.054, "less")
prop.test(p = c(0.054, 0.050), "less")
prop.test(n = c(595, 599),p = c(0.054, 0.050), "less")
prop.test(x = c(32, 30), n = c(595, 599), alternative = "greater", correct = F)
prop.test(x = c(30, 32), n = c(599, 595), alternative = "less", correct = F)
prop.test(x = c(18, 32), n = c(622, 595), alternative = "less")
prop.test(x = c(18, 32), n = c(622, 595), alternative = "less", correct = F)
prop.test(x = c(51, 32), n = c(606, 595), alternative = "greater", correct = F)
prop.test(x = c(38, 32), n = c(578, 595), alternative = "greater", correct = F)
prop.test(x = c(30, 32), n = c(599, 595), alternative = "greater", correct = F)
prop.test(x = c(18, 32), n = c(622, 595), alternative = "greater", correct = F)
0.05/4
z.test()
?ztest
?z.test
?z.prop
source('~/.active-rstudio-document', echo=TRUE)
summary(df_alc)
plot(df['alq120q'])
plot(df[alq120q])
plot(df_alc[alq120q])
plot(df_alc['alq120q'])
table(df_alc['alq120q'])
source('~/Google Drive/DSI/capstone/dsi-capstone1/data/Data_to_csv.R', echo=TRUE)
install.packages("sas7bdat")
